<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[メモ帳]]></title>
  <link href="http://asahima.github.io/atom.xml" rel="self"/>
  <link href="http://asahima.github.io/"/>
  <updated>2015-02-08T05:21:29+09:00</updated>
  <id>http://asahima.github.io/</id>
  <author>
    <name><![CDATA[asahima]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[breeze-vizで遊んでみる]]></title>
    <link href="http://asahima.github.io/blog/2015/02/08/breeze-vizdeyou-ndemiru/"/>
    <updated>2015-02-08T00:03:48+09:00</updated>
    <id>http://asahima.github.io/blog/2015/02/08/breeze-vizdeyou-ndemiru</id>
    <content type="html"><![CDATA[<p>昨日はbreeze-vizを導入してQuickStartに乗っているソースを動かしてみるということをやりました。今日は与えられた点と最小二乗法で求めた回帰直線をplotしてみようということをやってみます。</p>

<p>ソースはこんな感じ。breeze-vizのplotの第一引数は描画する点のx座標、第二引数はy座標になっています。第三引数は描画するものを示しているようで、&#8221;.&ldquo;を指定すると点がプロットされます。ここで何も指定しないと直線が描画されることになります。Documentが見れれば細かいことが分かりそうですが、breeze.plotに関してはapi documentの方にも記述がないので実際にソースを読むしかなさそうです(私が探しきれていないだけで実はあったりするのかな)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">breeze.linalg._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">breeze.plot._</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Data</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Double</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">datas</span> <span class="k">=</span> <span class="nc">Array</span><span class="o">[</span><span class="kt">Data</span><span class="o">](</span><span class="nc">Data</span><span class="o">(</span><span class="mf">4.0</span><span class="o">,</span> <span class="mf">7.0</span><span class="o">),</span> <span class="nc">Data</span><span class="o">(</span><span class="mf">8.0</span><span class="o">,</span> <span class="mf">10.0</span><span class="o">),</span> <span class="nc">Data</span><span class="o">(</span><span class="mf">13.0</span><span class="o">,</span> <span class="mf">11.0</span><span class="o">),</span> <span class="nc">Data</span><span class="o">(</span><span class="mf">17.0</span><span class="o">,</span> <span class="mf">14.0</span><span class="o">))</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">value</span> <span class="k">=</span> <span class="n">leastSquares</span><span class="o">(</span><span class="n">datas</span><span class="o">)</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;a:${value._1} b:${value._2}&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">x</span> <span class="k">=</span> <span class="n">datas</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="n">data</span> <span class="k">=&gt;</span> <span class="n">data</span><span class="o">.</span><span class="n">x</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">y</span> <span class="k">=</span> <span class="n">datas</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="n">data</span> <span class="k">=&gt;</span> <span class="n">data</span><span class="o">.</span><span class="n">y</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">oy</span> <span class="k">=</span> <span class="n">datas</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="n">data</span> <span class="k">=&gt;</span> <span class="n">value</span><span class="o">.</span><span class="n">_1</span> <span class="o">*</span> <span class="n">data</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">value</span><span class="o">.</span><span class="n">_2</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// plot</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">f</span> <span class="k">=</span> <span class="nc">Figure</span><span class="o">()</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">p</span> <span class="k">=</span> <span class="n">f</span><span class="o">.</span><span class="n">subplot</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">p</span> <span class="o">+=</span> <span class="n">plot</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="sc">&#39;.&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">+=</span> <span class="n">plot</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">oy</span><span class="o">)</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="n">xlabel</span> <span class="k">=</span> <span class="s">&quot;x&quot;</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="n">ylabel</span> <span class="k">=</span> <span class="s">&quot;y&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">leastSquares</span><span class="o">(</span><span class="n">datas</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Data</span><span class="o">])</span><span class="k">:</span> <span class="o">(</span><span class="kt">Double</span><span class="o">,</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">x_sum</span> <span class="k">=</span> <span class="n">datas</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="n">data</span> <span class="k">=&gt;</span> <span class="n">data</span><span class="o">.</span><span class="n">x</span> <span class="o">}.</span><span class="n">sum</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">x_square_sum</span> <span class="k">=</span> <span class="n">datas</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="n">data</span> <span class="k">=&gt;</span> <span class="n">data</span><span class="o">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">data</span><span class="o">.</span><span class="n">x</span> <span class="o">}.</span><span class="n">sum</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">y_sum</span> <span class="k">=</span> <span class="n">datas</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="n">data</span> <span class="k">=&gt;</span> <span class="n">data</span><span class="o">.</span><span class="n">y</span> <span class="o">}.</span><span class="n">sum</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">x_y_sum</span> <span class="k">=</span> <span class="n">datas</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="n">data</span> <span class="k">=&gt;</span> <span class="n">data</span><span class="o">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">data</span><span class="o">.</span><span class="n">y</span> <span class="o">}.</span><span class="n">sum</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">a</span> <span class="k">=</span> <span class="o">(((</span><span class="n">x_sum</span> <span class="o">*</span> <span class="n">y_sum</span><span class="o">)</span> <span class="o">-</span> <span class="o">(</span><span class="n">datas</span><span class="o">.</span><span class="n">length</span> <span class="o">*</span> <span class="n">x_y_sum</span><span class="o">))</span> <span class="o">/</span> <span class="o">((</span><span class="n">x_sum</span> <span class="o">*</span> <span class="n">x_sum</span><span class="o">)</span> <span class="o">-</span> <span class="o">(</span><span class="n">datas</span><span class="o">.</span><span class="n">length</span> <span class="o">*</span> <span class="n">x_square_sum</span><span class="o">)))</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">b</span> <span class="k">=</span> <span class="o">(((</span><span class="n">x_sum</span> <span class="o">*</span> <span class="n">x_y_sum</span><span class="o">)</span> <span class="o">-</span> <span class="o">(</span><span class="n">x_square_sum</span> <span class="o">*</span> <span class="n">y_sum</span><span class="o">))</span> <span class="o">/</span> <span class="o">((</span><span class="n">x_sum</span> <span class="o">*</span> <span class="n">x_sum</span><span class="o">)</span> <span class="o">-</span> <span class="o">(</span><span class="n">datas</span><span class="o">.</span><span class="n">length</span> <span class="o">*</span> <span class="n">x_square_sum</span><span class="o">)))</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>追記</h4>

<p>plotに関して、描画するstyleを記述するのはmatplotlibにもあるようです。ですが、matplotlibの場合、指定できる文字の種類がbreeze-vizに比べて多いようです。</p>

<p>breeze-vizで使用できる文字は</p>

<ul>
<li>&lsquo;-&rsquo;</li>
<li>&lsquo;.&rsquo;</li>
<li>&lsquo;+&rsquo;</li>
</ul>


<p>の３つだけのようです。これはplotに適当な文字を入れてみると出力されるエラーに記述されていました。</p>

<blockquote><blockquote><p>java.lang.IllegalArgumentException: Expected style to be one of - . or +</p></blockquote></blockquote>

<p>ちなみにplotで指定できるオプションとして</p>

<ul>
<li>style</li>
<li>colorcode</li>
<li>name</li>
<li>lines</li>
<li>shapes</li>
<li>labels</li>
<li>tips</li>
</ul>


<p>などがあるようです。tipsが何を示しているのかがよく分かりませんが、これについてはソースを読んで調べたいと思っています。</p>

<h3>まとめ</h3>

<p>breeze-vizを使い始めて、予想以上にDocumentがなくて驚いています。まぁ、&#8221;This API is very experimentable&#8221;とソースコードにも記述されているので、まだ作る段階ではないということなのでしょうが。とりあえず自分のメモ代わりということで、今後使い方などをまとめていきたいなと思っていて、<a href="http://bicycle1885.hatenablog.com/entry/2014/02/14/023734">matplotlib入門</a>のような形で見やすくまとめられたらなと考えています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[緑化活動をしていきたい]]></title>
    <link href="http://asahima.github.io/blog/2015/02/07/lu-hua-huo-dong-wositeikitai/"/>
    <updated>2015-02-07T04:39:20+09:00</updated>
    <id>http://asahima.github.io/blog/2015/02/07/lu-hua-huo-dong-wositeikitai</id>
    <content type="html"><![CDATA[<p>これ私もやっていきたいなーと思った記事があったので軽く紹介。</p>

<p>詳細は以下の記事を参照してください。
- <a href="http://mitsuse.github.io/slides/2014/ryokuka/">緑化活動、しませんか</a></p>

<p>内容を私的に一文でまとめると「アウトプットの習慣をつけよう」だと思っています。もう少し詳しく説明するとgithubではユーザ画面で contributions calender というものを提供しています。これはそのユーザがgithubに対してどれだけcontributionしているかを評価するためのものになっていて、contributionの回数が多いほど白から濃い緑色になるというものです。ここで上記のスライドの作者の方はgithubにcontributionする行為を「緑化活動」として、これを継続的にやっていこうという話をしています(世間でも緑化活動と言ってるかはよく知らない)。</p>

<p>この「緑化活動」の利点として、実際の作業が可視化されることです。contributionの回数が具体的に色として表示されますし、継続できているかどうかが一目で分かります。ちなみに私は真っ白です。</p>

<p>上記の記事を見て、今まである程度まで完成しないとgithubには上げていなかったことに気づきました。そこそこ動く状態じゃないと上げづらかったというのが理由です。その程度の理由なので、これからは積極的に上げていきたいと思います。でも、まぁ適度に商い程度に続けていければと思いつつですが。。。</p>

<p>今作りたいなーと思っているものが幾つかあるので、それを作りつつ、またこのブログを書きつつでやっていきたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[breeze-vizのサンプルを動かしてみた]]></title>
    <link href="http://asahima.github.io/blog/2015/02/07/breeze-vizfalsesanpuruwodong-kasitemita/"/>
    <updated>2015-02-07T03:16:41+09:00</updated>
    <id>http://asahima.github.io/blog/2015/02/07/breeze-vizfalsesanpuruwodong-kasitemita</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p>今現在、機械学習・Scalaの勉強がてらに<a href="http://gihyo.jp/dev/serial/01/machine-learning">機械学習　はじめよう</a>で解説されているものをScalaで実装するということを行なっています。元の記事ではアルゴリズムをPythonで実装しており、線形代数のようなものを扱うためのライブラリであるnumpyやグラフ描画用のmatplotlibを利用しています。</p>

<p>私はScalaで実装するのですが、PythonにnumpyやmatplotlibがあるようにScalaにも同じようなものが存在していて、numpyはbreeze、matplotlibはbreeze-vizといったライブラリと置き換えることができます（たぶん）</p>

<h2>breezeとは</h2>

<p>breezeとはScalaNLPというscalaで自然言語処理・機械学習などを扱うためのプロジェクトで開発されている機械学習・数的計算用のライブラリです。ScalaNLP自体はbreeze以外にもEpicやPuckというようなものが提供されています。Epicはよくわからないですが、PuckはBerkeley NLP Groupで開発されているBerkeleyParserをGPU上で動作させるために実装したものみたいです。
breeze-vizはbreezeを構成するモジュールの一つでグラフ描画用のライブラリになっています。</p>

<h2>今回やったこと</h2>

<p>breezeが用意している<a href="https://github.com/scalanlp/breeze/wiki/Quickstart">QuickStart</a>のうちのbreeze-vizの部分を試したというものです。</p>

<h3>環境</h3>

<ul>
<li>MacOSX

<ul>
<li>10.9.5</li>
</ul>
</li>
<li>Scala

<ul>
<li>2.11.2</li>
</ul>
</li>
<li>sbt

<ul>
<li>0.13.6</li>
</ul>
</li>
</ul>


<p>ソースコード自体はQuickStartとまったく一緒ですが、一応乗っけておきます。関数の使い方などどこかmatplotlibを彷彿とさせます(公式にはmatlab likeと書いているのでmatlabもこんな感じなんですかね)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">breeze.linalg._</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">breeze.plot._</span>
</span><span class='line'>
</span><span class='line'><span class="nb">object</span> <span class="n">Main</span> <span class="n">extends</span> <span class="n">App</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">val</span> <span class="n">f</span> <span class="o">=</span> <span class="n">Figure</span><span class="p">()</span>
</span><span class='line'>  <span class="n">val</span> <span class="n">p</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">val</span> <span class="n">x</span> <span class="o">=</span> <span class="n">linspace</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">p</span> <span class="o">+=</span> <span class="n">plot</span><span class="p">(</span><span class="n">x</span> <span class="p">,</span><span class="n">x</span> <span class="p">:</span><span class="o">^</span> <span class="mf">2.0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">p</span> <span class="o">+=</span> <span class="n">plot</span><span class="p">(</span><span class="n">x</span> <span class="p">,</span><span class="n">x</span> <span class="p">:</span><span class="o">^</span> <span class="mf">3.0</span><span class="p">,</span> <span class="s">&#39;.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">p</span><span class="o">.</span><span class="n">xlabel</span> <span class="o">=</span> <span class="s">&quot;x axis&quot;</span>
</span><span class='line'>  <span class="n">p</span><span class="o">.</span><span class="n">ylabel</span> <span class="o">=</span> <span class="s">&quot;y axis&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">saveas</span><span class="p">(</span><span class="s">&quot;lines.png&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで私が何に詰まったかというと、sbtでbreezeを導入したにも関わらず、breeze.plotが存在しないという事態でした。breeze-viz自体はbreezeとは別のリポジトリで開発されていますが、最近、大本のbreezeのリポジトリに移動したという記述があったため、breezeのみでやったのですが動かなかったということです。</p>

<p>解決方法としては単純でbuild.sbtのlibraryDependenciesにbreeze-vizを記述してsbtを動かすだけです。簡単ですね。</p>

<h2>まとめ</h2>

<p>breezeもbreeze-vizもメジャーリリースされていないということもあって、いざ使ってみるとちょいちょいバグと遭遇します。ですが、使ってみるとpythonでnumpyやmatplotlibを使う感覚と使えるので興味のある方は使ってみるといいんじゃないでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rによるやさしい統計学:1~4章]]></title>
    <link href="http://asahima.github.io/blog/2015/01/23/rniyoruyasasiitong-ji-xue-1~4zhang/"/>
    <updated>2015-01-23T00:10:53+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/23/rniyoruyasasiitong-ji-xue-1~4zhang</id>
    <content type="html"><![CDATA[<p>幾つか統計に関する書籍を読んできましたが、いまいちピンと来なかったので実際に入力などして感覚が掴みやすそうなものを読んでみることにしました。</p>

<p>Rによるやさしい統計学はRと統計学の入門書でRを使いながら統計学に触れてみようという感じの本です。</p>

<p>1~4章を読んだので重要そうな所を簡単にまとめたいと思います。</p>

<h2>相関</h2>

<h2>抽出方法</h2>

<ul>
<li>今回用いられているのは単純無作為抽出

<ul>
<li>単純無作為抽出が行われる理由としては、抽出方法における分布が関係する</li>
<li>単純無作為抽出の場合、標本の分布は母集団の分布に従うが、他の抽出方法の場合だと、抽出方法によっては母集団の分布と等しくないことが考えられる</li>
</ul>
</li>
</ul>


<h2>不偏性</h2>

<ul>
<li>一般に標本の分散などを取り扱う場合の方法として標本分散と不偏分散がある</li>
<li>標本分散はよくある式の分散の式で求められるもので、不偏分散は割る値が-1になっているものである</li>
<li>この不偏性は一般に対象としている標本が母集団全体である場合は標本分散を、一部分である場合は不偏分散が用いられる</li>
<li>ここで不偏性をもつ推定量とは、ある標本分布の平均が母集団の平均と一定している場合の推定量のことをいう</li>
</ul>


<h2>標本分布</h2>

<ul>
<li><p>簡単に言えば標本統計量の分布</p>

<ol>
<li> 母集団から標本を取ってきて、母数を点推定する場合、その推定値(標本統計量)が本当に母集団を表現することができているかどうかが分からない</li>
<li> なので母集団から繰り返し標本を取ってきて、母数の点推定を行い、その分布を使って標本誤差を判定する

<ul>
<li>標本統計量の分布が標本分布になる</li>
</ul>
</li>
</ol>
</li>
<li><p>標本平均の場合、一般にサンプルサイズを大きくすれば、標本平均の標本分布は正規分布に従うと過程することができる</p>

<ul>
<li>中心極限定理っていうらしい</li>
</ul>
</li>
<li><p>一般に正規分布に従う母集団から得られる標本平均の標本分布は分散をサンプルサイズで割った正規分布に等しくなる</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[play.api.templates.Htmlがdeprecatedになってた]]></title>
    <link href="http://asahima.github.io/blog/2015/01/19/play-dot-api-dot-templates-dot-htmlgadeprecatedninatuteta/"/>
    <updated>2015-01-19T23:58:13+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/19/play-dot-api-dot-templates-dot-htmlgadeprecatedninatuteta</id>
    <content type="html"><![CDATA[<p>現在、knockoffを使って、markdownからhtmlに変換したものをdbに保存する際にstringnにしています。それをscala templateに渡す際には、play.api.templates.Htmlを使うとstringをhtmlとして使えるみたいです。</p>

<p>しかし、使ってみるとplay.api.templates.Htmlがdeprecatedになっていました。</p>

<p>色々見てみると、play.twirl.api.Htmlに変わっていました。使うときは注意が必要ですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[play-slickを使ってみる]]></title>
    <link href="http://asahima.github.io/blog/2015/01/18/play-slickwoshi-tutemiru/"/>
    <updated>2015-01-18T05:08:06+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/18/play-slickwoshi-tutemiru</id>
    <content type="html"><![CDATA[<p>PlayでDBを使うときのライブラリでplay-slickというものがあって、今回はそれを試してみたというものです。</p>

<h3>play-slickとは</h3>

<p><a href="https://github.com/playframework/play-slick">play-slick</a>はScalaのORマッパーライブラリであるSlickをplayで使いやすい形にするというライブラリです。slick自体がとても使いやすいORマッパーであるため、それがPlayで使えると非常に便利です。</p>

<h3>play-slickの使い方</h3>

<p>自分がとりえあず使ってみようという形でやってみたものを簡単にまとめようと思います。</p>

<h4>手順1 sbtでplay-slickをインストールする</h4>

<p>以下が自分が使っていたbuild.sbtの一部です。私は手元にインストールしているmysqlを使いたかったので、そのためのライブラリも記述しています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>libraryDependencies ++= Seq(
</span><span class='line'>    "org.slf4j" % "slf4j-nop" % "1.6.4",
</span><span class='line'>    "mysql" % "mysql-connector-java" % "5.1.28",
</span><span class='line'>    "com.typesafe.play" %% "play-slick" % "0.8.1"
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<h4>手順2 application.confを修正する</h4>

<p>application.confにslickを使うための設定を記述していきます。この中で大事なのがslick.defaultの部分です。slickはmodelsにtableの定義を書くとtableが生成されるのですが、これを記述しないと生成されないみたいです。この辺の設定についてはまだ良くわかってないので、時間があるときに調べられればと思います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.default.driver=com.mysql.jdbc.Driver
</span><span class='line'>db.default.url="jdbc:mysql://localhost/tododb"
</span><span class='line'>db.default.user=""
</span><span class='line'>db.default.password=""
</span><span class='line'>slick.default="models.\*</span></code></pre></td></tr></table></div></figure>


<h4>手順3 動かす</h4>

<p>あとはrunをすればいいです。初回のrunでtableを生成するかどうか聞いてくるので、生成してください
<img src="~/Desktop/gen_alert.png" alt="alert" /></p>

<h3>感想</h3>

<p>ホントはtableの定義の書き方もまとめたいんですが、自分でもよくわかってない部分が多いので、その辺が理解できたら書こうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[%と%%の違いに苦労する]]></title>
    <link href="http://asahima.github.io/blog/2015/01/17/percent-to-percent-percent-falsewei-iniku-lao-suru/"/>
    <updated>2015-01-17T04:59:27+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/17/percent-to-percent-percent-falsewei-iniku-lao-suru</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>scalaVersion := "2.11.5"
</span><span class='line'>
</span><span class='line'>// slickのscalaのversionを自動で補完する
</span><span class='line'>"com.typesafe.slick" %% "slick" % "2.1.0
</span><span class='line'>
</span><span class='line'>// '' のscalaのversionを自動で補完しない
</span><span class='line'>"com.typesafe.slick" % "slick\_2.11" % "2.1.0</span></code></pre></td></tr></table></div></figure>


<p>の二種類があるみたいです。まぁ、細かくいうと後に何か付け足したりできるみたいですけど。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[knockoffが入らない]]></title>
    <link href="http://asahima.github.io/blog/2015/01/17/knockoffgaru-ranai/"/>
    <updated>2015-01-17T03:55:44+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/17/knockoffgaru-ranai</id>
    <content type="html"><![CDATA[<p>sbtでknockoffを入れてみようと思った時に起きた話。</p>

<h2>ライブラリが入らない。。。</h2>

<p>knockoffはScalaのmarkdownパーサーのライブラリで、色々遊んでみようと思い、今回入れることに。しかし、色々やって見れども出力されるのは。。。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[error] (*:update) sbt.ResolveException: unresolved dependency: com.tristanhunt#knockoff_2.11;0.8.0-16: not found)]</span></code></pre></td></tr></table></div></figure>


<p>そりゃ、downloadすら出来てないんだからunresolved dependencyってでるよね。</p>

<h2>解決</h2>

<p>原因はsbtで探しに行くmavenのリポジトリの中にscalaのversionの2.10以降に対応するものが登録されていないためでした。githubの方のリポジトリには2.11に対応と書いてあったので不覚でした。mavenにあるのは2.9.2まで対応しているものでした。</p>

<p>こんな感じで修正してみて、sbtを動かしたら無事knockoffを導入することができました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- scalaVersion := "2.11.5"
</span><span class='line'>+ scalaVersion := "2.9.2"</span></code></pre></td></tr></table></div></figure>


<h2>感想</h2>

<p>mavenのリポジトリ経由ではなくsbtで直接githubを指定する方法ってないんかなーと。</p>

<h2>追記</h2>

<p>普通にgithub上のライブラリを指定する方法があるみたいですね。これで入れてみて動かしてみますかね。
<a href="http://qiita.com/kawachi/items/71af20a102ecca41561d">Github 上のライブラリや sbt plugin を使う (sbt 0.13 以降用)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sbtを動かしてもライブラリがdownloadされない]]></title>
    <link href="http://asahima.github.io/blog/2015/01/17/sbtwodong-kasitemoraiburarigadownloadsarenai/"/>
    <updated>2015-01-17T03:13:55+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/17/sbtwodong-kasitemoraiburarigadownloadsarenai</id>
    <content type="html"><![CDATA[<p>sbtでライブラリを導入しようとした際に起きたことですが、build.sbtにlibrarydependenciesを記入してcompileしてもライブラリがdownloadされませんでした。</p>

<p>以下が出力されたエラー</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[warn]  ::::::::::::::::::::::::::::::::::::::::::::::
</span><span class='line'>[warn]  ::          UNRESOLVED DEPENDENCIES         ::
</span><span class='line'>[warn]  ::::::::::::::::::::::::::::::::::::::::::::::
</span><span class='line'>[warn]  :: com.tristanhunt#knockoff_2.11;0.8.2: not found
</span><span class='line'>[warn]  ::::::::::::::::::::::::::::::::::::::::::::::
</span><span class='line'>[trace] Stack trace suppressed: run last *:update for the full output.
</span><span class='line'>[error] (*:update) sbt.ResolveException: unresolved dependency: com.tristanhunt#knockoff_2.11;0.8.2: not found)]]]]]]]</span></code></pre></td></tr></table></div></figure>


<p>downloadされてないんだから、unresolved dependencyになるのも当たり前なんですけどね。これの原因はbuild.sbtに記述されているScalaのversionが異なっているためでした。</p>

<p>scalaのversionの確認方法は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>asahima:knockoff_sample/ $ scala -version                             [3:22:32]
</span><span class='line'>Scala code runner version 2.11.2 -- Copyright 2002-2013, LAMP/EPFL]</span></code></pre></td></tr></table></div></figure>


<p>ちなみにbuild.sbtに記述されていたscalaのversionは2.11.5でした。これを上に書かれているversionに書き直すと通常どおりに動きました。</p>

<h2>感想</h2>

<p>Scalaの知識もそうですが、sbtに関する知識もないとだめですね。この辺から色々勉強しなければいけないと改めて感じたので、それについてもちょいちょいまとめていきたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[読書:心理統計学の基礎　三章]]></title>
    <link href="http://asahima.github.io/blog/2015/01/17/du-shu-xin-li-tong-ji-xue-falseji-chu-san-zhang/"/>
    <updated>2015-01-17T02:17:01+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/17/du-shu-xin-li-tong-ji-xue-falseji-chu-san-zhang</id>
    <content type="html"><![CDATA[<h2>共分散と相関係数</h2>

<ul>
<li>共分散

<ul>
<li>対象としている変数同士に相関があるかを知るために指標</li>
<li>共分散が正なら正の相関、負なら負の相関がある</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[play2でHello World]]></title>
    <link href="http://asahima.github.io/blog/2015/01/15/play2dehello-world/"/>
    <updated>2015-01-15T06:21:08+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/15/play2dehello-world</id>
    <content type="html"><![CDATA[<p>Wikiを作るためにPlay2を実際に触ってみようということで、Hello Worldを出力してみた。</p>

<p>今回使った環境として</p>

<ul>
<li>Scala</li>
<li>Play2</li>
<li>Intellij Idea 14 Ultimate</li>
</ul>


<p>になります。学生なので無料でUltimateを使えています。
以下、Hello Worldの出力の過程です。</p>

<h2>手順１ 既存のソースを見てみる</h2>

<p>最初に出力されるApplication.scalanのソースコードは以下のようになっていました。これは<strong>/index</strong>にアクセスした際に、<strong>/app/views/index.scala.html</strong>を返すという意味になります。okは正しいrequestの場合みたいです。なので、ただHello Worldを表示したければ、この辺をいじればいいみたい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package controllers
</span><span class='line'>
</span><span class='line'>import play.api._
</span><span class='line'>import play.api.mvc._
</span><span class='line'>
</span><span class='line'>object Application extends Controller {
</span><span class='line'>
</span><span class='line'>  def index = Action {
</span><span class='line'>      Ok(views.html.index("Your new application is ready."))
</span><span class='line'>            }
</span><span class='line'>  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>手順2 Hello Worldを表示するhtmlを指定する</h2>

<p>Hello Worldを表示するファイルを作る前に、requestを飛ばす先を変更します。</p>

<p>変更点は一つだけで
<strong>views.html.index() => views.html.hello()</strong>
です。これは<strong>/app/views/index.scala.html</strong>から<strong>/app/views/hello.scala.html</strong>に変更するという意味です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package controllers
</span><span class='line'>
</span><span class='line'>import play.api._
</span><span class='line'>import play.api.mvc._
</span><span class='line'>
</span><span class='line'>object Application extends Controller {
</span><span class='line'>
</span><span class='line'>  def index = Action {
</span><span class='line'>      Ok(views.html.hello())
</span><span class='line'>            }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>手順3 htmlファイルを作成する</h2>

<p>ただこれだけ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE html>
</span><span class='line'>&lt;html>
</span><span class='line'>&lt;head lang="en">
</span><span class='line'>  &lt;meta charset="UTF-8">
</span><span class='line'>    &lt;title>&lt;/title>
</span><span class='line'>&lt;/head>
</span><span class='line'>&lt;body>
</span><span class='line'>    &lt;h1>Hello World&lt;/h1>
</span><span class='line'>&lt;/body>
</span><span class='line'> &lt;/html></span></code></pre></td></tr></table></div></figure>


<p>これで実行すればHello Worldが出力されます。</p>

<h2>おまけ</h2>

<p>Hello Worldを出力する上で、routingを全く気にしていないですが、実際にアプリケーションを作る上でroutingは必須です。簡単にroutingをする方法を見てみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Routes
</span><span class='line'># This file defines all application routes (Higher priority routes first)
</span><span class='line'># ~~~~
</span><span class='line'>
</span><span class='line'># Home page
</span><span class='line'>GET     /                           controllers.Application.index
</span><span class='line'>
</span><span class='line'># Map static resources from the /public folder to the /assets URL path
</span><span class='line'>GET     /assets/\*file               controllers.Assets.at(path="/public", file)</span></code></pre></td></tr></table></div></figure>


<p>この中で変更する部分は
<strong>GET     /                           controllers.Application.index</strong>
です。これは<strong>/</strong>にgetを投げたときに<strong>/app/controllers/Application.scalaのindex</strong>を表示するという意味です(多分)。なので、この辺を自分のやりたいようにできます(ある程度までは)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ScalaでWikiをつくりたい]]></title>
    <link href="http://asahima.github.io/blog/2015/01/15/scaladewikiwotukututemitai/"/>
    <updated>2015-01-15T03:07:05+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/15/scaladewikiwotukututemitai</id>
    <content type="html"><![CDATA[<p>研究やプログラミングをする際に、何か気になったことやこれは覚えておきたいなと思ったことはいつもローカルで動かしているWikiに書き込んでいるのですが、最近自分で使っているWikiに不満を覚えたので、勉強がてらに挑戦してみることにしみました。</p>

<h2>欲しい機能</h2>

<p>自分で使う上で欲しい機能は以下のようなものです。</p>

<ul>
<li>記事の投稿</li>
<li>&lsquo;&rsquo; 削除</li>
<li>&lsquo;&rsquo; 編集</li>
<li>&lsquo;&rsquo; 検索</li>
<li>&lsquo;&rsquo; タグ付与</li>
<li>markdownでの記入</li>
<li>markdownのpreview</li>
</ul>


<h2>何で作るか</h2>

<ul>
<li>言語

<ul>
<li>Scala</li>
</ul>
</li>
<li>使いたいライブラリ

<ul>
<li>Play2.x or Skinny

<ul>
<li>Webフレームワーク</li>
<li>フルスタックらしい</li>
</ul>
</li>
<li>Slick

<ul>
<li>ORM</li>
</ul>
</li>
<li>knockoff

<ul>
<li>markdownをHTMLに変換するライブラリらしい</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>まぁ、こんな構成でぼちぼちやっていこうと思います。その過程を書いていければと思います。</p>

<p>では</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scalaの勉強]]></title>
    <link href="http://asahima.github.io/blog/2015/01/15/scalafalsemian-qiang/"/>
    <updated>2015-01-15T01:07:26+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/15/scalafalsemian-qiang</id>
    <content type="html"><![CDATA[<p>ちょっとした事情でScalaを使う必要が出てきたため、急いで勉強することにしました。細かい部分は使っていく上で調べればいいと思うので、今回は簡単な部分を書いていきたいと思います。</p>

<h2>Scala</h2>

<ul>
<li><p>Scalaとは</p>

<ul>
<li>JVM上で動くプログラミング言語

<ul>
<li>javaのライブラリを使える</li>
</ul>
</li>
<li>関数型とオブジェクト志向のハイブリッドの言語</li>
<li>基本的な内容はJavaに近い？</li>
<li>オブジェクトは基本的にimmutable</li>
</ul>
</li>
<li><p>関数型</p>

<ul>
<li>関数が完結しているため、リファクタ・テストがしやすい</li>
<li>関数がファーストクラス

<ul>
<li>関数自体を引数または返り値に指定することが可能</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>データ型</h3>

<ul>
<li>Byte</li>
<li>Short</li>
<li>Int</li>
<li>Long</li>
<li>Char</li>
<li>String</li>
<li>Float</li>
<li>Double</li>
<li><p>Boolean</p></li>
<li><p>デフォルト値としてアンダースコアを使うことができる</p>

<ul>
<li>変数宣言でvarを使った際</li>
</ul>
</li>
<li>Scalaの型はプリミティブではなく全部オブジェクト

<ul>
<li>値に対してメソッドを呼ぶことができる？</li>
</ul>
</li>
</ul>


<h3>配列</h3>

<ul>
<li>配列の宣言方法

<ul>
<li>var l = new Array<a href="%E3%82%B5%E3%82%A4%E3%82%BA">型</a></li>
</ul>
</li>
<li>配列のindexは[]ではなくて()で指定する

<ul>
<li>他の言語とは違って、メソッドのシンタックスシュガーみたいな感じ？</li>
</ul>
</li>
</ul>


<h3>遅延評価</h3>

<ul>
<li>参照されるまで変数自体を評価しない</li>
<li>これをすることで高速化が図れるらしい

<ul>
<li>メモリも節約できる？</li>
</ul>
</li>
</ul>


<h3>パターンマッチ</h3>

<ul>
<li>Scalaはこれが非常に強力らしい</li>
<li>matchを使う</li>
<li>caseの部分に記述する条件にはクラスのオブジェクトを使用することができる</li>
<li>matchのワイルドカードとして_を指定する

<ul>
<li>ワイルドカードを指定していないパターンマッチで、パターン外の物が出現するとMatchErrorがでる</li>
</ul>
</li>
</ul>


<h3>関数</h3>

<ul>
<li>可変長の引数

<ul>
<li>関数の引数で「引数名:引数*」で表現する</li>
</ul>
</li>
<li>プレースホルダ

<ul>
<li>関数の中でその値が複数回使われない場合に引数を_で表現する</li>
</ul>
</li>
<li>部分適用

<ul>
<li>引数の一部を指定した関数を作る？</li>
</ul>
</li>
</ul>


<h3>クラス・オブジェクト</h3>

<ul>
<li><p>クラス</p>

<ul>
<li>基本コンストラクタ

<ul>
<li>初期化の処理はクラス内部に直接記述する</li>
<li>クラスの引数にval・varを指定しないと、クラス外からアクセスできなくなる</li>
</ul>
</li>
<li>補助コンストラクタ

<ul>
<li>コンストラクタを複数定義しなければならない場合に利用される</li>
</ul>
</li>
</ul>
</li>
<li><p>コンパニオンオブジェクト</p>

<ul>
<li>あるクラスに対して全く同じスコープ・名前で定義されたシングルトンオブジェクト</li>
<li>コンパニオンクラスのprivateなフィールドやメソッドに対してアクセスすることができる</li>
<li>applyはファクトリみたいな使い方をする</li>
</ul>
</li>
<li><p>unapplyを定義することでパターンマッチに使える</p></li>
<li><p>case class</p>

<ul>
<li>パターンマッチで使用するような処理などを事前に定義したクラスを定義する仕組み</li>
<li>applyが定義されるのでnewを使用せずインスタンス化ができる

<ul>
<li>内部にでnewしたインスタンスが生成され、returnされる？</li>
</ul>
</li>
<li>コンストラクタの引数は全てvalで宣言される</li>
<li>unapplyが自動で定義</li>
</ul>
</li>
</ul>


<h3>Trait</h3>

<ul>
<li>javaのinterfaceとは異なり、実装を持つことができる

<ul>
<li>interfaceの場合だと、毎回interfaceに定義されているメソッドの内部処理を記述しなければならなくなる</li>
</ul>
</li>
</ul>


<p>まだ大分残ってるけど、力尽きたのでこんなもんで。残りはやる気がでたらやる</p>

<h2>参考文献</h2>

<ul>
<li><a href="http://www.amazon.co.jp/Scala%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%A9%E3%83%96%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E7%AC%AC2%E7%89%88-Martin-Odersky/dp/4844330845/ref=sr_1_1?ie=UTF8&amp;qid=1421258688&amp;sr=8-1&amp;keywords=Scala">Scalaスケーラブルプログラミング</a></li>
<li><a href="http://www.amazon.co.jp/Guide-Scala%E3%83%BCScala%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80-%E4%B8%AD%E6%9D%91%E4%BF%AE%E5%A4%AA-ebook/dp/B00BOBYZTQ/ref=sr_1_3?ie=UTF8&amp;qid=1421258688&amp;sr=8-3&amp;keywords=Scala">Guide to ScalaーScalaプログラミング入門</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初投稿]]></title>
    <link href="http://asahima.github.io/blog/2014/10/07/chu-tou-gao/"/>
    <updated>2014-10-07T20:18:55+09:00</updated>
    <id>http://asahima.github.io/blog/2014/10/07/chu-tou-gao</id>
    <content type="html"><![CDATA[<p>周囲から導入が難しいと言われて、ちょっと試してみようというノリでgithub pagesにoctpressを入れた次第です。どうせということで、自分の興味のあるトピックについて勉強したことを書いていければと思っています。</p>

<p>興味のあるトピックは</p>

<ul>
<li>プログラミング</li>
<li>機械学習</li>
<li>自然言語処理</li>
</ul>


<p>です。</p>

<p>よろしくお願いします</p>
]]></content>
  </entry>
  
</feed>
