<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: breeze | メモ帳]]></title>
  <link href="http://asahima.github.io/blog/categories/breeze/atom.xml" rel="self"/>
  <link href="http://asahima.github.io/"/>
  <updated>2015-02-08T13:53:48+09:00</updated>
  <id>http://asahima.github.io/</id>
  <author>
    <name><![CDATA[asahima]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[breeze-vizで遊んでみる]]></title>
    <link href="http://asahima.github.io/blog/2015/02/08/breeze-vizdeyou-ndemiru/"/>
    <updated>2015-02-08T00:03:48+09:00</updated>
    <id>http://asahima.github.io/blog/2015/02/08/breeze-vizdeyou-ndemiru</id>
    <content type="html"><![CDATA[<p>昨日はbreeze-vizを導入してQuickStartに乗っているソースを動かしてみるということをやりました。今日は与えられた点と最小二乗法で求めた回帰直線をplotしてみようということをやってみます。</p>

<p>ソースはこんな感じ。breeze-vizのplotの第一引数は描画する点のx座標、第二引数はy座標になっています。第三引数は描画するものを示しているようで、&#8221;.&ldquo;を指定すると点がプロットされます。ここで何も指定しないと直線が描画されることになります。Documentが見れれば細かいことが分かりそうですが、breeze.plotに関してはapi documentの方にも記述がないので実際にソースを読むしかなさそうです(私が探しきれていないだけで実はあったりするのかな)。</p>

<pre><code class="scala">import breeze.linalg._
import breeze.plot._

case class Data(x: Double, y: Double)

object Main {
  def main(args: Array[String]): Unit = {
    val datas = Array[Data](Data(4.0, 7.0), Data(8.0, 10.0), Data(13.0, 11.0), Data(17.0, 14.0))
    val value = leastSquares(datas)
    println(s"a:${value._1} b:${value._2}")

    val x = datas.map { data =&gt; data.x }
    val y = datas.map { data =&gt; data.y }
    val oy = datas.map { data =&gt; value._1 * data.x + value._2}

    // plot
    val f = Figure()
    val p = f.subplot(0)

    p += plot(x, y, '.')
    p += plot(x, oy)
    p.xlabel = "x"
    p.ylabel = "y"
  }

  def leastSquares(datas: Array[Data]): (Double, Double) = {
    val x_sum = datas.map { data =&gt; data.x }.sum
    val x_square_sum = datas.map { data =&gt; data.x * data.x }.sum
    val y_sum = datas.map { data =&gt; data.y }.sum
    val x_y_sum = datas.map { data =&gt; data.x * data.y }.sum

    val a = (((x_sum * y_sum) - (datas.length * x_y_sum)) / ((x_sum * x_sum) - (datas.length * x_square_sum)))
    val b = (((x_sum * x_y_sum) - (x_square_sum * y_sum)) / ((x_sum * x_sum) - (datas.length * x_square_sum)))

    (a, b)
  }
}
</code></pre>

<h4>追記</h4>

<p>plotに関して、描画するstyleを記述するのはmatplotlibにもあるようです。ですが、matplotlibの場合、指定できる文字の種類がbreeze-vizに比べて多いようです。</p>

<p>breeze-vizで使用できる文字は</p>

<ul>
<li>&lsquo;-&rsquo;</li>
<li>&lsquo;.&rsquo;</li>
<li>&lsquo;+&rsquo;</li>
</ul>


<p>の３つだけのようです。これはplotに適当な文字を入れてみると出力されるエラーに記述されていました。</p>

<blockquote><blockquote><p>java.lang.IllegalArgumentException: Expected style to be one of - . or +</p></blockquote></blockquote>

<p>ちなみにplotで指定できるオプションとして</p>

<ul>
<li>style</li>
<li>colorcode</li>
<li>name</li>
<li>lines</li>
<li>shapes</li>
<li>labels</li>
<li>tips</li>
</ul>


<p>以下がソースに記述されていたコメントになります</p>

<blockquote><p>/<em>*
* Plots the given y versus the given x with the given style.
* @param x X-coordinates, co-indexed with y (and indexed by keys of type K).
* @param y Y-coordinates, co-indexed with x (and indexed by keys of type K).
* @param style Matlab-like style spec of the series to plot.
* @param name Name of the series to show in the legend.
* @param labels Optional in-graph labels for some points.
* @param tips Optional mouse-over tooltips for some points.
</em>/</p></blockquote>

<h3>まとめ</h3>

<p>breeze-vizを使い始めて、予想以上にDocumentがなくて驚いています。まぁ、&#8221;This API is very experimentable&#8221;とソースコードにも記述されているので、まだ作る段階ではないということなのでしょうが。とりあえず自分のメモ代わりということで、今後使い方などをまとめていきたいなと思っていて、<a href="http://bicycle1885.hatenablog.com/entry/2014/02/14/023734">matplotlib入門</a>のような形で見やすくまとめられたらなと考えています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[breeze-vizのサンプルを動かしてみた]]></title>
    <link href="http://asahima.github.io/blog/2015/02/07/breeze-vizfalsesanpuruwodong-kasitemita/"/>
    <updated>2015-02-07T03:16:41+09:00</updated>
    <id>http://asahima.github.io/blog/2015/02/07/breeze-vizfalsesanpuruwodong-kasitemita</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p>今現在、機械学習・Scalaの勉強がてらに<a href="http://gihyo.jp/dev/serial/01/machine-learning">機械学習　はじめよう</a>で解説されているものをScalaで実装するということを行なっています。元の記事ではアルゴリズムをPythonで実装しており、線形代数のようなものを扱うためのライブラリであるnumpyやグラフ描画用のmatplotlibを利用しています。</p>

<p>私はScalaで実装するのですが、PythonにnumpyやmatplotlibがあるようにScalaにも同じようなものが存在していて、numpyはbreeze、matplotlibはbreeze-vizといったライブラリと置き換えることができます（たぶん）</p>

<h2>breezeとは</h2>

<p>breezeとはScalaNLPというscalaで自然言語処理・機械学習などを扱うためのプロジェクトで開発されている機械学習・数的計算用のライブラリです。ScalaNLP自体はbreeze以外にもEpicやPuckというようなものが提供されています。Epicはよくわからないですが、PuckはBerkeley NLP Groupで開発されているBerkeleyParserをGPU上で動作させるために実装したものみたいです。
breeze-vizはbreezeを構成するモジュールの一つでグラフ描画用のライブラリになっています。</p>

<h2>今回やったこと</h2>

<p>breezeが用意している<a href="https://github.com/scalanlp/breeze/wiki/Quickstart">QuickStart</a>のうちのbreeze-vizの部分を試したというものです。</p>

<h3>環境</h3>

<ul>
<li>MacOSX

<ul>
<li>10.9.5</li>
</ul>
</li>
<li>Scala

<ul>
<li>2.11.2</li>
</ul>
</li>
<li>sbt

<ul>
<li>0.13.6</li>
</ul>
</li>
</ul>


<p>ソースコード自体はQuickStartとまったく一緒ですが、一応乗っけておきます。関数の使い方などどこかmatplotlibを彷彿とさせます(公式にはmatlab likeと書いているのでmatlabもこんな感じなんですかね)。</p>

<pre><code class="python">import breeze.linalg._
import breeze.plot._

object Main extends App {
  val f = Figure()
  val p = f.subplot(0)
  val x = linspace(0.0, 1.0)

  p += plot(x ,x :^ 2.0)
  p += plot(x ,x :^ 3.0, '.')

  p.xlabel = "x axis"
  p.ylabel = "y axis"

  f.saveas("lines.png")
}
</code></pre>

<p>ここで私が何に詰まったかというと、sbtでbreezeを導入したにも関わらず、breeze.plotが存在しないという事態でした。breeze-viz自体はbreezeとは別のリポジトリで開発されていますが、最近、大本のbreezeのリポジトリに移動したという記述があったため、breezeのみでやったのですが動かなかったということです。</p>

<p>解決方法としては単純でbuild.sbtのlibraryDependenciesにbreeze-vizを記述してsbtを動かすだけです。簡単ですね。</p>

<h2>まとめ</h2>

<p>breezeもbreeze-vizもメジャーリリースされていないということもあって、いざ使ってみるとちょいちょいバグと遭遇します。ですが、使ってみるとpythonでnumpyやmatplotlibを使う感覚と使えるので興味のある方は使ってみるといいんじゃないでしょうか。</p>
]]></content>
  </entry>
  
</feed>
