<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: play2 | メモ帳]]></title>
  <link href="http://asahima.github.io/blog/categories/play2/atom.xml" rel="self"/>
  <link href="http://asahima.github.io/"/>
  <updated>2015-01-18T05:53:08+09:00</updated>
  <id>http://asahima.github.io/</id>
  <author>
    <name><![CDATA[asahima]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[play2でHello World]]></title>
    <link href="http://asahima.github.io/blog/2015/01/15/play2dehello-world/"/>
    <updated>2015-01-15T06:21:08+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/15/play2dehello-world</id>
    <content type="html"><![CDATA[<p>Wikiを作るためにPlay2を実際に触ってみようということで、Hello Worldを出力してみた。</p>

<p>今回使った環境として</p>

<ul>
<li>Scala</li>
<li>Play2</li>
<li>Intellij Idea 14 Ultimate</li>
</ul>


<p>になります。学生なので無料でUltimateを使えています。
以下、Hello Worldの出力の過程です。</p>

<h2>手順１ 既存のソースを見てみる</h2>

<p>最初に出力されるApplication.scalanのソースコードは以下のようになっていました。これは<strong>/index</strong>にアクセスした際に、<strong>/app/views/index.scala.html</strong>を返すという意味になります。okは正しいrequestの場合みたいです。なので、ただHello Worldを表示したければ、この辺をいじればいいみたい。</p>

<p>{% codeblock %}
package controllers</p>

<p>import play.api.<em>
import play.api.mvc.</em></p>

<p>object Application extends Controller {</p>

<p>  def index = Action {
      Ok(views.html.index(&ldquo;Your new application is ready.&rdquo;))
            }</p>

<p>}</p>

<p>{% endcodeblock %}</p>

<h2>手順2 Hello Worldを表示するhtmlを指定する</h2>

<p>Hello Worldを表示するファイルを作る前に、requestを飛ばす先を変更します。</p>

<p>変更点は一つだけで
<strong>views.html.index() => views.html.hello()</strong>
です。これは<strong>/app/views/index.scala.html</strong>から<strong>/app/views/hello.scala.html</strong>に変更するという意味です。</p>

<p>{% codeblock %}
package controllers</p>

<p>import play.api.<em>
import play.api.mvc.</em></p>

<p>object Application extends Controller {</p>

<p>  def index = Action {
      Ok(views.html.hello())
            }
}</p>

<p>{% endcodeblock %}</p>

<h2>手順3 htmlファイルを作成する</h2>

<p>ただこれだけ</p>

<p>{% codeblock %}</p>

<p>&lt;!DOCTYPE html>
<html>
<head lang="en">
  <meta charset="UTF-8">
    <title></title>
</head>
<body>
    <h1>Hello World</h1>
</body>
 </html></p>

<p>{% endcodeblock %}</p>

<p>これで実行すればHello Worldが出力されます。</p>

<h2>おまけ</h2>

<p>Hello Worldを出力する上で、routingを全く気にしていないですが、実際にアプリケーションを作る上でroutingは必須です。簡単にroutingをする方法を見てみます。</p>

<p>{% codeblock %}</p>

<h1>Routes</h1>

<h1>This file defines all application routes (Higher priority routes first)</h1>

<h1>~~~~</h1>

<h1>Home page</h1>

<p>GET     /                           controllers.Application.index</p>

<h1>Map static resources from the /public folder to the /assets URL path</h1>

<p>GET     /assets/*file               controllers.Assets.at(path=&ldquo;/public&rdquo;, file)</p>

<p>{% endcodeblock %}</p>

<p>この中で変更する部分は
<strong>GET     /                           controllers.Application.index</strong>
です。これは<strong>/</strong>にgetを投げたときに<strong>/app/controllers/Application.scalaのindex</strong>を表示するという意味です(多分)。なので、この辺を自分のやりたいようにできます(ある程度までは)</p>
]]></content>
  </entry>
  
</feed>
