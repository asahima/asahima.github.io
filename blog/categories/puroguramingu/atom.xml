<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: プログラミング | NLP初心者のメモ帳]]></title>
  <link href="http://asahima.github.io/blog/categories/puroguramingu/atom.xml" rel="self"/>
  <link href="http://asahima.github.io/"/>
  <updated>2015-02-23T03:33:44+09:00</updated>
  <id>http://asahima.github.io/</id>
  <author>
    <name><![CDATA[asahima]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ChaPASを使って遊びたい]]></title>
    <link href="http://asahima.github.io/blog/2015/02/19/chapaswoshi-tuteyou-ndemitai/"/>
    <updated>2015-02-19T04:03:01+09:00</updated>
    <id>http://asahima.github.io/blog/2015/02/19/chapaswoshi-tuteyou-ndemitai</id>
    <content type="html"><![CDATA[<p>ChaPASを使って何か遊べないかなーと思い立ったので、てきとうに出力をparseするスクリプトを書いてみました。大したことはしてないです。</p>

<h2>ChaPAS</h2>

<p><a href="https://sites.google.com/site/yotarow/chapas">ChaPAS</a>は日本語の述語項構造解析器です。述語項構造解析は文中の「誰が何をどうした」という意味的な役割を同定する自然言語処理のタスクです。</p>

<p>使い方は至って簡単で</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo &ldquo;私は課題に鉛筆を使う&rdquo; | java -jar chapas.jar -I RAW&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;ul>
</span><span class='line'>&lt;li>0 3D 0/1 -1.656864
</span><span class='line'>私  名詞,代名詞,一般,&lt;em>,&lt;/em>,&lt;em>,私,ワタシ,ワタシ O   ID=&ldquo;1&rdquo;
</span><span class='line'>は  助詞,係助詞,&lt;/em>,&lt;em>,&lt;/em>,*,は,ハ,ワ    O&lt;/li>
</span><span class='line'>&lt;li>1 3D 0/1 -1.656864
</span><span class='line'>課題    名詞,一般,&lt;em>,&lt;/em>,&lt;em>,&lt;/em>,課題,カダイ,カダイ    O   ID=&ldquo;2&rdquo;
</span><span class='line'>に  助詞,格助詞,一般,&lt;em>,&lt;/em>,*,に,ニ,ニ O&lt;/li>
</span><span class='line'>&lt;li>2 3D 0/1 -1.656864
</span><span class='line'>鉛筆    名詞,一般,&lt;em>,&lt;/em>,&lt;em>,&lt;/em>,鉛筆,エンピツ,エンピツ    O   ID=&ldquo;3&rdquo;
</span><span class='line'>を  助詞,格助詞,一般,&lt;em>,&lt;/em>,*,を,ヲ,ヲ O&lt;/li>
</span><span class='line'>&lt;li>3 -1D 0/0 0.000000
</span><span class='line'>使う    動詞,自立,&lt;em>,&lt;/em>,五段・ワ行促音便,基本形,使う,ツカウ,ツカウ    O   type=&ldquo;pred&rdquo; ga=&ldquo;1&rdquo; ni=&ldquo;2&rdquo; o=&ldquo;3&rdquo;
</span><span class='line'>EOS&lt;/li>
</span><span class='line'>&lt;/ul>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>お手軽ですね。</p>

<p>この例文の場合、名詞「私」、「課題」、「鉛筆」に対してIDが振られており、述語「使う」のガ格が「私」、二格が「課題」、ヲ格が「鉛筆」となっています。</p>

<h2>今回</h2>

<p>ChaPASを使って遊ぶためにはこの出力をparseする必要があります（実際のところは良く分からない）。なので、簡単にこの出力をparseするスクリプトを作ってみました。</p>

<p><a href="https://github.com/asahima/ChapasWrapper">asahima/ChapasWrapper</a></p>

<p>今のところ、超お手軽スクリプトなので、もう少しどうにかしたいと思っていますが何時になるやら。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ScalaでNeural Networkを実装したい]]></title>
    <link href="http://asahima.github.io/blog/2015/02/14/scaladeniyurarunetutowoshi-zhuang-sitai/"/>
    <updated>2015-02-14T19:10:01+09:00</updated>
    <id>http://asahima.github.io/blog/2015/02/14/scaladeniyurarunetutowoshi-zhuang-sitai</id>
    <content type="html"><![CDATA[<p>機械学習を勉強している過程で色々なアルゴリズムを実装して理解を深めようと取り組んできていますが、今回はNeural Networkを実装したいなーと思っております。実装したいと思っているのは、シンプルな<strong>フィードフォワード型</strong>のNeural Networkです。</p>

<h3>Neural Network</h3>

<p><strong>フィードフォワード型</strong>のNeural Networkは入力層から出力層に向けて順伝搬を行う(逆方向へは伝搬しない)モデルです。逆方向へ伝搬するモデルとしては<strong>Recurrent Neural Network</strong>などがあります。Recurrent Neural Networkについてはまだ良くわかっていないので記述しません。</p>

<h3>実装</h3>

<p>実装としては、[2]を参考にさせて頂いたこともあって、ほとんど同じになっています。違いとしてはあちらの記事ではPython・Numpyでの実装ですが、私の方ではScala・breezeで実装しているというものです。</p>

<p>ソースコードは<a href="">こちら</a></p>

<h3>まとめ</h3>

<p>実装するにあたって、PRMLに記述されているNeural Networkの数式の写経を繰り返していたのですが、ようやく理解できたような気がします。一番初めにNeural Networkの数式を見た時は、こんなもの私には理解できないと思っていたのですが、一つ一つ解読していくと意外となんとかなるんだなーと思っています。</p>

<p>今後の方針としては色々ありますが、現状でいうなら</p>

<ul>
<li>活性化関数をクラスの外から指定できるようにする</li>
<li>mini-batch AdaGradを実装する</li>
</ul>


<h3>参考</h3>

<ol>
<li><a href="http://aidiary.hatenablog.com/entry/20140122/1390395760">多層パーセプトロンによる関数近似</a></li>
<li><a href="http://aidiary.hatenablog.com/entry/20140201/1391218771">多層パーセプトロンで手書き数字認識</a></li>
<li><a href="http://pafelog.net/mining.pdf">Scalaで機械学習</a></li>
<li><a href="">breeze scaladoc</a></li>
<li><a href="http://rishida.hatenablog.com/entry/2014/02/25/110643">ゼロから始めるDeepLearning<em>その1</em>ニューラルネットとは</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[breeze-vizで遊んでみる]]></title>
    <link href="http://asahima.github.io/blog/2015/02/08/breeze-vizdeyou-ndemiru/"/>
    <updated>2015-02-08T00:03:48+09:00</updated>
    <id>http://asahima.github.io/blog/2015/02/08/breeze-vizdeyou-ndemiru</id>
    <content type="html"><![CDATA[<p>昨日はbreeze-vizを導入してQuickStartに乗っているソースを動かしてみるということをやりました。今日は与えられた点と最小二乗法で求めた回帰直線をplotしてみようということをやってみます。</p>

<p>ソースはこんな感じ。breeze-vizのplotの第一引数は描画する点のx座標、第二引数はy座標になっています。第三引数は描画するものを示しているようで、&#8221;.&ldquo;を指定すると点がプロットされます。ここで何も指定しないと直線が描画されることになります。Documentが見れれば細かいことが分かりそうですが、breeze.plotに関してはapi documentの方にも記述がないので実際にソースを読むしかなさそうです(私が探しきれていないだけで実はあったりするのかな)。</p>

<pre><code class="scala">import breeze.linalg._
import breeze.plot._

case class Data(x: Double, y: Double)

object Main {
  def main(args: Array[String]): Unit = {
    val datas = Array[Data](Data(4.0, 7.0), Data(8.0, 10.0), Data(13.0, 11.0), Data(17.0, 14.0))
    val value = leastSquares(datas)
    println(s"a:${value._1} b:${value._2}")

    val x = datas.map { data =&gt; data.x }
    val y = datas.map { data =&gt; data.y }
    val oy = datas.map { data =&gt; value._1 * data.x + value._2}

    // plot
    val f = Figure()
    val p = f.subplot(0)

    p += plot(x, y, '.')
    p += plot(x, oy)
    p.xlabel = "x"
    p.ylabel = "y"
  }

  def leastSquares(datas: Array[Data]): (Double, Double) = {
    val x_sum = datas.map { data =&gt; data.x }.sum
    val x_square_sum = datas.map { data =&gt; data.x * data.x }.sum
    val y_sum = datas.map { data =&gt; data.y }.sum
    val x_y_sum = datas.map { data =&gt; data.x * data.y }.sum

    val a = (((x_sum * y_sum) - (datas.length * x_y_sum)) / ((x_sum * x_sum) - (datas.length * x_square_sum)))
    val b = (((x_sum * x_y_sum) - (x_square_sum * y_sum)) / ((x_sum * x_sum) - (datas.length * x_square_sum)))

    (a, b)
  }
}
</code></pre>

<h4>追記</h4>

<p>plotに関して、描画するstyleを記述するのはmatplotlibにもあるようです。ですが、matplotlibの場合、指定できる文字の種類がbreeze-vizに比べて多いようです。</p>

<p>breeze-vizで使用できる文字は</p>

<ul>
<li>&lsquo;-&rsquo;</li>
<li>&lsquo;.&rsquo;</li>
<li>&lsquo;+&rsquo;</li>
</ul>


<p>の３つだけのようです。これはplotに適当な文字を入れてみると出力されるエラーに記述されていました。</p>

<blockquote><blockquote><p>java.lang.IllegalArgumentException: Expected style to be one of - . or +</p></blockquote></blockquote>

<p>ちなみにplotで指定できるオプションとして</p>

<ul>
<li>style</li>
<li>colorcode</li>
<li>name</li>
<li>lines</li>
<li>shapes</li>
<li>labels</li>
<li>tips</li>
</ul>


<p>以下がソースに記述されていたコメントになります</p>

<blockquote><p>/<em>*
* Plots the given y versus the given x with the given style.
* @param x X-coordinates, co-indexed with y (and indexed by keys of type K).
* @param y Y-coordinates, co-indexed with x (and indexed by keys of type K).
* @param style Matlab-like style spec of the series to plot.
* @param name Name of the series to show in the legend.
* @param labels Optional in-graph labels for some points.
* @param tips Optional mouse-over tooltips for some points.
</em>/</p></blockquote>

<h3>まとめ</h3>

<p>breeze-vizを使い始めて、予想以上にDocumentがなくて驚いています。まぁ、&#8221;This API is very experimentable&#8221;とソースコードにも記述されているので、まだ作る段階ではないということなのでしょうが。とりあえず自分のメモ代わりということで、今後使い方などをまとめていきたいなと思っていて、<a href="http://bicycle1885.hatenablog.com/entry/2014/02/14/023734">matplotlib入門</a>のような形で見やすくまとめられたらなと考えています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[緑化活動をしていきたい]]></title>
    <link href="http://asahima.github.io/blog/2015/02/07/lu-hua-huo-dong-wositeikitai/"/>
    <updated>2015-02-07T04:39:20+09:00</updated>
    <id>http://asahima.github.io/blog/2015/02/07/lu-hua-huo-dong-wositeikitai</id>
    <content type="html"><![CDATA[<p>これ私もやっていきたいなーと思った記事があったので軽く紹介。</p>

<p>詳細は以下の記事を参照してください。
- <a href="http://mitsuse.github.io/slides/2014/ryokuka/">緑化活動、しませんか</a></p>

<p>内容を私的に一文でまとめると「アウトプットの習慣をつけよう」だと思っています。もう少し詳しく説明するとgithubではユーザ画面で contributions calender というものを提供しています。これはそのユーザがgithubに対してどれだけcontributionしているかを評価するためのものになっていて、contributionの回数が多いほど白から濃い緑色になるというものです。ここで上記のスライドの作者の方はgithubにcontributionする行為を「緑化活動」として、これを継続的にやっていこうという話をしています(世間でも緑化活動と言ってるかはよく知らない)。</p>

<p>この「緑化活動」の利点として、実際の作業が可視化されることです。contributionの回数が具体的に色として表示されますし、継続できているかどうかが一目で分かります。ちなみに私は真っ白です。</p>

<p>上記の記事を見て、今まである程度まで完成しないとgithubには上げていなかったことに気づきました。そこそこ動く状態じゃないと上げづらかったというのが理由です。その程度の理由なので、これからは積極的に上げていきたいと思います。でも、まぁ適度に商い程度に続けていければと思いつつですが。。。</p>

<p>今作りたいなーと思っているものが幾つかあるので、それを作りつつ、またこのブログを書きつつでやっていきたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[breeze-vizのサンプルを動かしてみた]]></title>
    <link href="http://asahima.github.io/blog/2015/02/07/breeze-vizfalsesanpuruwodong-kasitemita/"/>
    <updated>2015-02-07T03:16:41+09:00</updated>
    <id>http://asahima.github.io/blog/2015/02/07/breeze-vizfalsesanpuruwodong-kasitemita</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p>今現在、機械学習・Scalaの勉強がてらに<a href="http://gihyo.jp/dev/serial/01/machine-learning">機械学習　はじめよう</a>で解説されているものをScalaで実装するということを行なっています。元の記事ではアルゴリズムをPythonで実装しており、線形代数のようなものを扱うためのライブラリであるnumpyやグラフ描画用のmatplotlibを利用しています。</p>

<p>私はScalaで実装するのですが、PythonにnumpyやmatplotlibがあるようにScalaにも同じようなものが存在していて、numpyはbreeze、matplotlibはbreeze-vizといったライブラリと置き換えることができます（たぶん）</p>

<h2>breezeとは</h2>

<p>breezeとはScalaNLPというscalaで自然言語処理・機械学習などを扱うためのプロジェクトで開発されている機械学習・数的計算用のライブラリです。ScalaNLP自体はbreeze以外にもEpicやPuckというようなものが提供されています。Epicはよくわからないですが、PuckはBerkeley NLP Groupで開発されているBerkeleyParserをGPU上で動作させるために実装したものみたいです。
breeze-vizはbreezeを構成するモジュールの一つでグラフ描画用のライブラリになっています。</p>

<h2>今回やったこと</h2>

<p>breezeが用意している<a href="https://github.com/scalanlp/breeze/wiki/Quickstart">QuickStart</a>のうちのbreeze-vizの部分を試したというものです。</p>

<h3>環境</h3>

<ul>
<li>MacOSX

<ul>
<li>10.9.5</li>
</ul>
</li>
<li>Scala

<ul>
<li>2.11.2</li>
</ul>
</li>
<li>sbt

<ul>
<li>0.13.6</li>
</ul>
</li>
</ul>


<p>ソースコード自体はQuickStartとまったく一緒ですが、一応乗っけておきます。関数の使い方などどこかmatplotlibを彷彿とさせます(公式にはmatlab likeと書いているのでmatlabもこんな感じなんですかね)。</p>

<pre><code class="python">import breeze.linalg._
import breeze.plot._

object Main extends App {
  val f = Figure()
  val p = f.subplot(0)
  val x = linspace(0.0, 1.0)

  p += plot(x ,x :^ 2.0)
  p += plot(x ,x :^ 3.0, '.')

  p.xlabel = "x axis"
  p.ylabel = "y axis"

  f.saveas("lines.png")
}
</code></pre>

<p>ここで私が何に詰まったかというと、sbtでbreezeを導入したにも関わらず、breeze.plotが存在しないという事態でした。breeze-viz自体はbreezeとは別のリポジトリで開発されていますが、最近、大本のbreezeのリポジトリに移動したという記述があったため、breezeのみでやったのですが動かなかったということです。</p>

<p>解決方法としては単純でbuild.sbtのlibraryDependenciesにbreeze-vizを記述してsbtを動かすだけです。簡単ですね。</p>

<h2>まとめ</h2>

<p>breezeもbreeze-vizもメジャーリリースされていないということもあって、いざ使ってみるとちょいちょいバグと遭遇します。ですが、使ってみるとpythonでnumpyやmatplotlibを使う感覚と使えるので興味のある方は使ってみるといいんじゃないでしょうか。</p>
]]></content>
  </entry>
  
</feed>
