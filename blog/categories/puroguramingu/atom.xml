<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: プログラミング | メモ帳]]></title>
  <link href="http://asahima.github.io/blog/categories/puroguramingu/atom.xml" rel="self"/>
  <link href="http://asahima.github.io/"/>
  <updated>2015-02-07T04:15:47+09:00</updated>
  <id>http://asahima.github.io/</id>
  <author>
    <name><![CDATA[asahima]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[breeze-vizのサンプルを動かしてみた]]></title>
    <link href="http://asahima.github.io/blog/2015/02/07/breeze-vizfalsesanpuruwodong-kasitemita/"/>
    <updated>2015-02-07T03:16:41+09:00</updated>
    <id>http://asahima.github.io/blog/2015/02/07/breeze-vizfalsesanpuruwodong-kasitemita</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p>今現在、機械学習・Scalaの勉強がてらに<a href="http://gihyo.jp/dev/serial/01/machine-learning">機械学習　はじめよう</a>で解説されているものをScalaで実装するということを行なっています。元の記事ではアルゴリズムをPythonで実装しており、線形代数のようなものを扱うためのライブラリであるnumpyやグラフ描画用のmatplotlibを利用しています。</p>

<p>私はScalaで実装するのですが、PythonにnumpyやmatplotlibがあるようにScalaにも同じようなものが存在していて、numpyはbreeze、matplotlibはbreeze-vizといったライブラリと置き換えることができます（たぶん）</p>

<h2>breezeとは</h2>

<p>breezeとはScalaNLPというscalaで自然言語処理・機械学習などを扱うためのプロジェクトで開発されている機械学習・数的計算用のライブラリです。ScalaNLP自体はbreeze以外にもEpicやPuckというようなものが提供されています。Epicはよくわからないですが、PuckはBerkeley NLP Groupで開発されているBerkeleyParserをGPU上で動作させるために実装したものみたいです。
breeze-vizはbreezeを構成するモジュールの一つでグラフ描画用のライブラリになっています。</p>

<h2>今回やったこと</h2>

<p>breezeが用意している<a href="https://github.com/scalanlp/breeze/wiki/Quickstart">QuickStart</a>のうちのbreeze-vizの部分を試したというものです。</p>

<h3>環境</h3>

<ul>
<li>MacOSX

<ul>
<li>10.9.5</li>
</ul>
</li>
<li>Scala

<ul>
<li>2.11.2</li>
</ul>
</li>
<li>sbt

<ul>
<li>0.13.6</li>
</ul>
</li>
</ul>


<p>ソースコード自体はQuickStartとまったく一緒ですが、一応乗っけておきます。関数の使い方などどこかmatplotlibを彷彿とさせます(公式にはmatlab likeと書いているのでmatlabもこんな感じなんですかね)。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import breeze.linalg.&lt;em>
</span><span class='line'>import breeze.plot.&lt;/em>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>object Main extends App {
</span><span class='line'>  val f = Figure()
</span><span class='line'>  val p = f.subplot(0)
</span><span class='line'>  val x = linspace(0.0, 1.0)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  p += plot(x ,x :^ 2.0)
</span><span class='line'>  p += plot(x ,x :^ 3.0, &lsquo;.&rsquo;)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  p.xlabel = &ldquo;x axis&rdquo;
</span><span class='line'>  p.ylabel = &ldquo;y axis&rdquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  f.saveas(&ldquo;lines.png&rdquo;)
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>ここで私が何に詰まったかというと、sbtでbreezeを導入したにも関わらず、breeze.plotが存在しないという事態でした。breeze-viz自体はbreezeとは別のリポジトリで開発されていますが、最近、大本のbreezeのリポジトリに移動したという記述があったため、breezeのみでやったのですが動かなかったということです。</p>

<p>解決方法としては単純でbuild.sbtのlibraryDependenciesにbreeze-vizを記述してsbtを動かすだけです。簡単ですね。</p>

<h2>まとめ</h2>

<p>breezeもbreeze-vizもメジャーリリースされていないということもあって、いざ使ってみるとちょいちょいバグと遭遇します。ですが、使ってみるとpythonでnumpyやmatplotlibを使う感覚と使えるので興味のある方は使ってみるといいんじゃないでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rによるやさしい統計学:1~4章]]></title>
    <link href="http://asahima.github.io/blog/2015/01/23/rniyoruyasasiitong-ji-xue-1~4zhang/"/>
    <updated>2015-01-23T00:10:53+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/23/rniyoruyasasiitong-ji-xue-1~4zhang</id>
    <content type="html"><![CDATA[<p>幾つか統計に関する書籍を読んできましたが、いまいちピンと来なかったので実際に入力などして感覚が掴みやすそうなものを読んでみることにしました。</p>

<p>Rによるやさしい統計学はRと統計学の入門書でRを使いながら統計学に触れてみようという感じの本です。</p>

<p>1~4章を読んだので重要そうな所を簡単にまとめたいと思います。</p>

<h2>相関</h2>

<h2>抽出方法</h2>

<ul>
<li>今回用いられているのは単純無作為抽出

<ul>
<li>単純無作為抽出が行われる理由としては、抽出方法における分布が関係する</li>
<li>単純無作為抽出の場合、標本の分布は母集団の分布に従うが、他の抽出方法の場合だと、抽出方法によっては母集団の分布と等しくないことが考えられる</li>
</ul>
</li>
</ul>


<h2>不偏性</h2>

<ul>
<li>一般に標本の分散などを取り扱う場合の方法として標本分散と不偏分散がある</li>
<li>標本分散はよくある式の分散の式で求められるもので、不偏分散は割る値が-1になっているものである</li>
<li>この不偏性は一般に対象としている標本が母集団全体である場合は標本分散を、一部分である場合は不偏分散が用いられる</li>
<li>ここで不偏性をもつ推定量とは、ある標本分布の平均が母集団の平均と一定している場合の推定量のことをいう</li>
</ul>


<h2>標本分布</h2>

<ul>
<li><p>簡単に言えば標本統計量の分布</p>

<ol>
<li> 母集団から標本を取ってきて、母数を点推定する場合、その推定値(標本統計量)が本当に母集団を表現することができているかどうかが分からない</li>
<li> なので母集団から繰り返し標本を取ってきて、母数の点推定を行い、その分布を使って標本誤差を判定する

<ul>
<li>標本統計量の分布が標本分布になる</li>
</ul>
</li>
</ol>
</li>
<li><p>標本平均の場合、一般にサンプルサイズを大きくすれば、標本平均の標本分布は正規分布に従うと過程することができる</p>

<ul>
<li>中心極限定理っていうらしい</li>
</ul>
</li>
<li><p>一般に正規分布に従う母集団から得られる標本平均の標本分布は分散をサンプルサイズで割った正規分布に等しくなる</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[play.api.templates.Htmlがdeprecatedになってた]]></title>
    <link href="http://asahima.github.io/blog/2015/01/19/play-dot-api-dot-templates-dot-htmlgadeprecatedninatuteta/"/>
    <updated>2015-01-19T23:58:13+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/19/play-dot-api-dot-templates-dot-htmlgadeprecatedninatuteta</id>
    <content type="html"><![CDATA[<p>現在、knockoffを使って、markdownからhtmlに変換したものをdbに保存する際にstringnにしています。それをscala templateに渡す際には、play.api.templates.Htmlを使うとstringをhtmlとして使えるみたいです。</p>

<p>しかし、使ってみるとplay.api.templates.Htmlがdeprecatedになっていました。</p>

<p>色々見てみると、play.twirl.api.Htmlに変わっていました。使うときは注意が必要ですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[play-slickを使ってみる]]></title>
    <link href="http://asahima.github.io/blog/2015/01/18/play-slickwoshi-tutemiru/"/>
    <updated>2015-01-18T05:08:06+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/18/play-slickwoshi-tutemiru</id>
    <content type="html"><![CDATA[<p>PlayでDBを使うときのライブラリでplay-slickというものがあって、今回はそれを試してみたというものです。</p>

<h3>play-slickとは</h3>

<p><a href="https://github.com/playframework/play-slick">play-slick</a>はScalaのORマッパーライブラリであるSlickをplayで使いやすい形にするというライブラリです。slick自体がとても使いやすいORマッパーであるため、それがPlayで使えると非常に便利です。</p>

<h3>play-slickの使い方</h3>

<p>自分がとりえあず使ってみようという形でやってみたものを簡単にまとめようと思います。</p>

<h4>手順1 sbtでplay-slickをインストールする</h4>

<p>以下が自分が使っていたbuild.sbtの一部です。私は手元にインストールしているmysqlを使いたかったので、そのためのライブラリも記述しています。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>libraryDependencies ++= Seq(
</span><span class='line'>    &ldquo;org.slf4j&rdquo; % &ldquo;slf4j-nop&rdquo; % &ldquo;1.6.4&rdquo;,
</span><span class='line'>    &ldquo;mysql&rdquo; % &ldquo;mysql-connector-java&rdquo; % &ldquo;5.1.28&rdquo;,
</span><span class='line'>    &ldquo;com.typesafe.play&rdquo; %% &ldquo;play-slick&rdquo; % &ldquo;0.8.1&rdquo;
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure></p>

<h4>手順2 application.confを修正する</h4>

<p>application.confにslickを使うための設定を記述していきます。この中で大事なのがslick.defaultの部分です。slickはmodelsにtableの定義を書くとtableが生成されるのですが、これを記述しないと生成されないみたいです。この辺の設定についてはまだ良くわかってないので、時間があるときに調べられればと思います。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.default.driver=com.mysql.jdbc.Driver
</span><span class='line'>db.default.url=&ldquo;jdbc:mysql://localhost/tododb&rdquo;
</span><span class='line'>db.default.user=&ldquo;&rdquo;
</span><span class='line'>db.default.password=&ldquo;&rdquo;
</span><span class='line'>slick.default=&ldquo;models.*</span></code></pre></td></tr></table></div></figure></p>

<h4>手順3 動かす</h4>

<p>あとはrunをすればいいです。初回のrunでtableを生成するかどうか聞いてくるので、生成してください
<img src="~/Desktop/gen_alert.png" alt="alert" /></p>

<h3>感想</h3>

<p>ホントはtableの定義の書き方もまとめたいんですが、自分でもよくわかってない部分が多いので、その辺が理解できたら書こうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[%と%%の違いに苦労する]]></title>
    <link href="http://asahima.github.io/blog/2015/01/17/percent-to-percent-percent-falsewei-iniku-lao-suru/"/>
    <updated>2015-01-17T04:59:27+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/17/percent-to-percent-percent-falsewei-iniku-lao-suru</id>
    <content type="html"><![CDATA[<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>scalaVersion := &ldquo;2.11.5&rdquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>// slickのscalaのversionを自動で補完する
</span><span class='line'>&ldquo;com.typesafe.slick&rdquo; %% &ldquo;slick&rdquo; % &ldquo;2.1.0&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>// &lsquo;&rsquo; のscalaのversionを自動で補完しない
</span><span class='line'>&ldquo;com.typesafe.slick&rdquo; % &ldquo;slick_2.11&rdquo; % &ldquo;2.1.0</span></code></pre></td></tr></table></div></figure></p>

<p>の二種類があるみたいです。まぁ、細かくいうと後に何か付け足したりできるみたいですけど。</p>
]]></content>
  </entry>
  
</feed>
