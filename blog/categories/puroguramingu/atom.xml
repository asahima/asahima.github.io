<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: プログラミング | メモ帳]]></title>
  <link href="http://asahima.github.io/blog/categories/puroguramingu/atom.xml" rel="self"/>
  <link href="http://asahima.github.io/"/>
  <updated>2015-01-15T07:08:49+09:00</updated>
  <id>http://asahima.github.io/</id>
  <author>
    <name><![CDATA[asahima]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[play2でHello World]]></title>
    <link href="http://asahima.github.io/blog/2015/01/15/play2dehello-world/"/>
    <updated>2015-01-15T06:21:08+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/15/play2dehello-world</id>
    <content type="html"><![CDATA[<p>Wikiを作るためにPlay2を実際に触ってみようということで、Hello Worldを出力してみた。</p>

<p>今回使った環境として</p>

<ul>
<li>Scala</li>
<li>Play2</li>
<li>Intellij Idea 14 Ultimate</li>
</ul>


<p>になります。学生なので無料でUltimateを使えています。
以下、Hello Worldの出力の過程です。</p>

<h2>手順１ 既存のソースを見てみる</h2>

<p>最初に出力されるApplication.scalanのソースコードは以下のようになっていました。これは<strong>/index</strong>にアクセスした際に、<strong>/app/views/index.scala.html</strong>を返すという意味になります。okは正しいrequestの場合みたいです。なので、ただHello Worldを表示したければ、この辺をいじればいいみたい。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package controllers&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>import play.api.&lt;em>
</span><span class='line'>import play.api.mvc.&lt;/em>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>object Application extends Controller {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  def index = Action {
</span><span class='line'>      Ok(views.html.index(&ldquo;Your new application is ready.&rdquo;))
</span><span class='line'>            }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h2>手順2 Hello Worldを表示するhtmlを指定する</h2>

<p>Hello Worldを表示するファイルを作る前に、requestを飛ばす先を変更します。</p>

<p>変更点は一つだけで
<strong>views.html.index() => views.html.hello()</strong>
です。これは<strong>/app/views/index.scala.html</strong>から<strong>/app/views/hello.scala.html</strong>に変更するという意味です。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package controllers&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>import play.api.&lt;em>
</span><span class='line'>import play.api.mvc.&lt;/em>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>object Application extends Controller {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  def index = Action {
</span><span class='line'>      Ok(views.html.hello())
</span><span class='line'>            }
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h2>手順3 htmlファイルを作成する</h2>

<p>ただこれだけ</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;!DOCTYPE html>
</span><span class='line'>&lt;html>
</span><span class='line'>&lt;head lang="en">
</span><span class='line'>  &lt;meta charset="UTF-8">
</span><span class='line'>    &lt;title>&lt;/title>
</span><span class='line'>&lt;/head>
</span><span class='line'>&lt;body>
</span><span class='line'>    &lt;h1>Hello World&lt;/h1>
</span><span class='line'>&lt;/body>
</span><span class='line'> &lt;/html>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>これで実行すればHello Worldが出力されます。</p>

<h2>おまけ</h2>

<p>Hello Worldを出力する上で、routingを全く気にしていないですが、実際にアプリケーションを作る上でroutingは必須です。簡単にroutingをする方法を見てみます。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Routes&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>This file defines all application routes (Higher priority routes first)&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>~~~~&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>Home page&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>GET     /                           controllers.Application.index&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Map static resources from the /public folder to the /assets URL path&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>GET     /assets/*file               controllers.Assets.at(path=&ldquo;/public&rdquo;, file)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>この中で変更する部分は
<strong>GET     /                           controllers.Application.index</strong>
です。これは<strong>/</strong>にgetを投げたときに<strong>/app/controllers/Application.scalaのindex</strong>を表示するという意味です(多分)。なので、この辺を自分のやりたいようにできます(ある程度までは)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ScalaでWikiをつくりたい]]></title>
    <link href="http://asahima.github.io/blog/2015/01/15/scaladewikiwotukututemitai/"/>
    <updated>2015-01-15T03:07:05+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/15/scaladewikiwotukututemitai</id>
    <content type="html"><![CDATA[<p>研究やプログラミングをする際に、何か気になったことやこれは覚えておきたいなと思ったことはいつもローカルで動かしているWikiに書き込んでいるのですが、最近自分で使っているWikiに不満を覚えたので、勉強がてらに挑戦してみることにしみました。</p>

<h2>欲しい機能</h2>

<p>自分で使う上で欲しい機能は以下のようなものです。</p>

<ul>
<li>記事の投稿</li>
<li>&lsquo;&rsquo; 削除</li>
<li>&lsquo;&rsquo; 編集</li>
<li>&lsquo;&rsquo; 検索</li>
<li>&lsquo;&rsquo; タグ付与</li>
<li>markdownでの記入</li>
<li>markdownのpreview</li>
</ul>


<h2>何で作るか</h2>

<ul>
<li>言語

<ul>
<li>Scala</li>
</ul>
</li>
<li>使いたいライブラリ

<ul>
<li>Play2.x or Skinny

<ul>
<li>Webフレームワーク</li>
<li>フルスタックらしい</li>
</ul>
</li>
<li>Slick

<ul>
<li>ORM</li>
</ul>
</li>
<li>knockoff

<ul>
<li>markdownをHTMLに変換するライブラリらしい</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>まぁ、こんな構成でぼちぼちやっていこうと思います。その過程を書いていければと思います。</p>

<p>では</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scalaの勉強]]></title>
    <link href="http://asahima.github.io/blog/2015/01/15/scalafalsemian-qiang/"/>
    <updated>2015-01-15T01:07:26+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/15/scalafalsemian-qiang</id>
    <content type="html"><![CDATA[<p>ちょっとした事情でScalaを使う必要が出てきたため、急いで勉強することにしました。細かい部分は使っていく上で調べればいいと思うので、今回は簡単な部分を書いていきたいと思います。</p>

<h2>Scala</h2>

<ul>
<li><p>Scalaとは</p>

<ul>
<li>JVM上で動くプログラミング言語

<ul>
<li>javaのライブラリを使える</li>
</ul>
</li>
<li>関数型とオブジェクト志向のハイブリッドの言語</li>
<li>基本的な内容はJavaに近い？</li>
<li>オブジェクトは基本的にimmutable</li>
</ul>
</li>
<li><p>関数型</p>

<ul>
<li>関数が完結しているため、リファクタ・テストがしやすい</li>
<li>関数がファーストクラス

<ul>
<li>関数自体を引数または返り値に指定することが可能</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>データ型</h3>

<ul>
<li>Byte</li>
<li>Short</li>
<li>Int</li>
<li>Long</li>
<li>Char</li>
<li>String</li>
<li>Float</li>
<li>Double</li>
<li><p>Boolean</p></li>
<li><p>デフォルト値としてアンダースコアを使うことができる</p>

<ul>
<li>変数宣言でvarを使った際</li>
</ul>
</li>
<li>Scalaの型はプリミティブではなく全部オブジェクト

<ul>
<li>値に対してメソッドを呼ぶことができる？</li>
</ul>
</li>
</ul>


<h3>配列</h3>

<ul>
<li>配列の宣言方法

<ul>
<li>var l = new Array<a href="%E3%82%B5%E3%82%A4%E3%82%BA">型</a></li>
</ul>
</li>
<li>配列のindexは[]ではなくて()で指定する

<ul>
<li>他の言語とは違って、メソッドのシンタックスシュガーみたいな感じ？</li>
</ul>
</li>
</ul>


<h3>遅延評価</h3>

<ul>
<li>参照されるまで変数自体を評価しない</li>
<li>これをすることで高速化が図れるらしい

<ul>
<li>メモリも節約できる？</li>
</ul>
</li>
</ul>


<h3>パターンマッチ</h3>

<ul>
<li>Scalaはこれが非常に強力らしい</li>
<li>matchを使う</li>
<li>caseの部分に記述する条件にはクラスのオブジェクトを使用することができる</li>
<li>matchのワイルドカードとして_を指定する

<ul>
<li>ワイルドカードを指定していないパターンマッチで、パターン外の物が出現するとMatchErrorがでる</li>
</ul>
</li>
</ul>


<h3>関数</h3>

<ul>
<li>可変長の引数

<ul>
<li>関数の引数で「引数名:引数*」で表現する</li>
</ul>
</li>
<li>プレースホルダ

<ul>
<li>関数の中でその値が複数回使われない場合に引数を_で表現する</li>
</ul>
</li>
<li>部分適用

<ul>
<li>引数の一部を指定した関数を作る？</li>
</ul>
</li>
</ul>


<h3>クラス・オブジェクト</h3>

<ul>
<li><p>クラス</p>

<ul>
<li>基本コンストラクタ

<ul>
<li>初期化の処理はクラス内部に直接記述する</li>
<li>クラスの引数にval・varを指定しないと、クラス外からアクセスできなくなる</li>
</ul>
</li>
<li>補助コンストラクタ

<ul>
<li>コンストラクタを複数定義しなければならない場合に利用される</li>
</ul>
</li>
</ul>
</li>
<li><p>コンパニオンオブジェクト</p>

<ul>
<li>あるクラスに対して全く同じスコープ・名前で定義されたシングルトンオブジェクト</li>
<li>コンパニオンクラスのprivateなフィールドやメソッドに対してアクセスすることができる</li>
<li>applyはファクトリみたいな使い方をする</li>
</ul>
</li>
<li><p>unapplyを定義することでパターンマッチに使える</p></li>
<li><p>case class</p>

<ul>
<li>パターンマッチで使用するような処理などを事前に定義したクラスを定義する仕組み</li>
<li>applyが定義されるのでnewを使用せずインスタンス化ができる

<ul>
<li>内部にでnewしたインスタンスが生成され、returnされる？</li>
</ul>
</li>
<li>コンストラクタの引数は全てvalで宣言される</li>
<li>unapplyが自動で定義</li>
</ul>
</li>
</ul>


<h3>Trait</h3>

<ul>
<li>javaのinterfaceとは異なり、実装を持つことができる

<ul>
<li>interfaceの場合だと、毎回interfaceに定義されているメソッドの内部処理を記述しなければならなくなる</li>
</ul>
</li>
</ul>


<p>まだ大分残ってるけど、力尽きたのでこんなもんで。残りはやる気がでたらやる</p>

<h2>参考文献</h2>

<ul>
<li><a href="http://www.amazon.co.jp/Scala%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%A9%E3%83%96%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E7%AC%AC2%E7%89%88-Martin-Odersky/dp/4844330845/ref=sr_1_1?ie=UTF8&amp;qid=1421258688&amp;sr=8-1&amp;keywords=Scala">Scalaスケーラブルプログラミング</a></li>
<li><a href="http://www.amazon.co.jp/Guide-Scala%E3%83%BCScala%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80-%E4%B8%AD%E6%9D%91%E4%BF%AE%E5%A4%AA-ebook/dp/B00BOBYZTQ/ref=sr_1_3?ie=UTF8&amp;qid=1421258688&amp;sr=8-3&amp;keywords=Scala">Guide to ScalaーScalaプログラミング入門</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
