<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scala | メモ帳]]></title>
  <link href="http://asahima.github.io/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://asahima.github.io/"/>
  <updated>2015-01-18T05:59:51+09:00</updated>
  <id>http://asahima.github.io/</id>
  <author>
    <name><![CDATA[asahima]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[play-slickを使ってみる]]></title>
    <link href="http://asahima.github.io/blog/2015/01/18/play-slickwoshi-tutemiru/"/>
    <updated>2015-01-18T05:08:06+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/18/play-slickwoshi-tutemiru</id>
    <content type="html"><![CDATA[<p>PlayでDBを使うときのライブラリでplay-slickというものがあって、今回はそれを試してみたというものです。</p>

<h3>play-slickとは</h3>

<p><a href="https://github.com/playframework/play-slick">play-slick</a>はScalaのORマッパーライブラリであるSlickをplayで使いやすい形にするというライブラリです。slick自体がとても使いやすいORマッパーであるため、それがPlayで使えると非常に便利です。</p>

<h3>play-slickの使い方</h3>

<p>自分がとりえあず使ってみようという形でやってみたものを簡単にまとめようと思います。</p>

<h4>手順1 sbtでplay-slickをインストールする</h4>

<p>以下が自分が使っていたbuild.sbtの一部です。私は手元にインストールしているmysqlを使いたかったので、そのためのライブラリも記述しています。</p>

<p>{% codeblock %}
libraryDependencies ++= Seq(
    &ldquo;org.slf4j&rdquo; % &ldquo;slf4j-nop&rdquo; % &ldquo;1.6.4&rdquo;,
    &ldquo;mysql&rdquo; % &ldquo;mysql-connector-java&rdquo; % &ldquo;5.1.28&rdquo;,
    &ldquo;com.typesafe.play&rdquo; %% &ldquo;play-slick&rdquo; % &ldquo;0.8.1&rdquo;
)
{% endcodeblock %}</p>

<h4>手順2 application.confを修正する</h4>

<p>application.confにslickを使うための設定を記述していきます。この中で大事なのがslick.defaultの部分です。slickはmodelsにtableの定義を書くとtableが生成されるのですが、これを記述しないと生成されないみたいです。この辺の設定についてはまだ良くわかってないので、時間があるときに調べられればと思います。</p>

<p>{% codeblock %}
db.default.driver=com.mysql.jdbc.Driver
db.default.url=&ldquo;jdbc:mysql://localhost/tododb&rdquo;
db.default.user=&ldquo;&rdquo;
db.default.password=&ldquo;&rdquo;
slick.default=&ldquo;models.*
{% endcodeblock %}</p>

<h4>手順3 動かす</h4>

<p>あとはrunをすればいいです。初回のrunでtableを生成するかどうか聞いてくるので、生成してください</p>

<h3>感想</h3>

<p>ホントはtableの定義の書き方もまとめたいんですが、自分でもよくわかってない部分が多いので、その辺が理解できたら書こうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[knockoffが入らない]]></title>
    <link href="http://asahima.github.io/blog/2015/01/17/knockoffgaru-ranai/"/>
    <updated>2015-01-17T03:55:44+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/17/knockoffgaru-ranai</id>
    <content type="html"><![CDATA[<p>sbtでknockoffを入れてみようと思った時に起きた話。</p>

<h2>ライブラリが入らない。。。</h2>

<p>knockoffはScalaのmarkdownパーサーのライブラリで、色々遊んでみようと思い、今回入れることに。しかし、色々やって見れども出力されるのは。。。</p>

<p>{% codeblock %}
[error] (*:update) sbt.ResolveException: unresolved dependency: com.tristanhunt#knockoff_2.11;0.8.0-16: not found)]
{% endcodeblock %}</p>

<p>そりゃ、downloadすら出来てないんだからunresolved dependencyってでるよね。</p>

<h2>解決</h2>

<p>原因はsbtで探しに行くmavenのリポジトリの中にscalaのversionの2.10以降に対応するものが登録されていないためでした。githubの方のリポジトリには2.11に対応と書いてあったので不覚でした。mavenにあるのは2.9.2まで対応しているものでした。</p>

<p>こんな感じで修正してみて、sbtを動かしたら無事knockoffを導入することができました。
{% codeblock %}
- scalaVersion := &ldquo;2.11.5&rdquo;
+ scalaVersion := &ldquo;2.9.2&rdquo;
{% endcodeblock %}</p>

<h2>感想</h2>

<p>mavenのリポジトリ経由ではなくsbtで直接githubを指定する方法ってないんかなーと。</p>

<h2>追記</h2>

<p>普通にgithub上のライブラリを指定する方法があるみたいですね。これで入れてみて動かしてみますかね。
<a href="http://qiita.com/kawachi/items/71af20a102ecca41561d">Github 上のライブラリや sbt plugin を使う (sbt 0.13 以降用)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sbtを動かしてもライブラリがdownloadされない]]></title>
    <link href="http://asahima.github.io/blog/2015/01/17/sbtwodong-kasitemoraiburarigadownloadsarenai/"/>
    <updated>2015-01-17T03:13:55+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/17/sbtwodong-kasitemoraiburarigadownloadsarenai</id>
    <content type="html"><![CDATA[<p>sbtでライブラリを導入しようとした際に起きたことですが、build.sbtにlibrarydependenciesを記入してcompileしてもライブラリがdownloadされませんでした。</p>

<p>以下が出力されたエラー</p>

<p>{% codeblock %}
[warn]  ::::::::::::::::::::::::::::::::::::::::::::::
[warn]  ::          UNRESOLVED DEPENDENCIES         ::
[warn]  ::::::::::::::::::::::::::::::::::::::::::::::
[warn]  :: com.tristanhunt#knockoff_2.11;0.8.2: not found
[warn]  ::::::::::::::::::::::::::::::::::::::::::::::
[trace] Stack trace suppressed: run last <em>:update for the full output.
[error] (</em>:update) sbt.ResolveException: unresolved dependency: com.tristanhunt#knockoff_2.11;0.8.2: not found)]]]]]]]
{% endcodeblock %}</p>

<p>downloadされてないんだから、unresolved dependencyになるのも当たり前なんですけどね。これの原因はbuild.sbtに記述されているScalaのversionが異なっているためでした。</p>

<p>scalaのversionの確認方法は
{% codeblock %}
asahima:knockoff_sample/ $ scala -version                             [3:22:32]
Scala code runner version 2.11.2 &ndash; Copyright 2002-2013, LAMP/EPFL]
{% endcodeblock %}</p>

<p>ちなみにbuild.sbtに記述されていたscalaのversionは2.11.5でした。これを上に書かれているversionに書き直すと通常どおりに動きました。</p>

<h2>感想</h2>

<p>Scalaの知識もそうですが、sbtに関する知識もないとだめですね。この辺から色々勉強しなければいけないと改めて感じたので、それについてもちょいちょいまとめていきたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[play2でHello World]]></title>
    <link href="http://asahima.github.io/blog/2015/01/15/play2dehello-world/"/>
    <updated>2015-01-15T06:21:08+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/15/play2dehello-world</id>
    <content type="html"><![CDATA[<p>Wikiを作るためにPlay2を実際に触ってみようということで、Hello Worldを出力してみた。</p>

<p>今回使った環境として</p>

<ul>
<li>Scala</li>
<li>Play2</li>
<li>Intellij Idea 14 Ultimate</li>
</ul>


<p>になります。学生なので無料でUltimateを使えています。
以下、Hello Worldの出力の過程です。</p>

<h2>手順１ 既存のソースを見てみる</h2>

<p>最初に出力されるApplication.scalanのソースコードは以下のようになっていました。これは<strong>/index</strong>にアクセスした際に、<strong>/app/views/index.scala.html</strong>を返すという意味になります。okは正しいrequestの場合みたいです。なので、ただHello Worldを表示したければ、この辺をいじればいいみたい。</p>

<p>{% codeblock %}
package controllers</p>

<p>import play.api.<em>
import play.api.mvc.</em></p>

<p>object Application extends Controller {</p>

<p>  def index = Action {
      Ok(views.html.index(&ldquo;Your new application is ready.&rdquo;))
            }</p>

<p>}</p>

<p>{% endcodeblock %}</p>

<h2>手順2 Hello Worldを表示するhtmlを指定する</h2>

<p>Hello Worldを表示するファイルを作る前に、requestを飛ばす先を変更します。</p>

<p>変更点は一つだけで
<strong>views.html.index() => views.html.hello()</strong>
です。これは<strong>/app/views/index.scala.html</strong>から<strong>/app/views/hello.scala.html</strong>に変更するという意味です。</p>

<p>{% codeblock %}
package controllers</p>

<p>import play.api.<em>
import play.api.mvc.</em></p>

<p>object Application extends Controller {</p>

<p>  def index = Action {
      Ok(views.html.hello())
            }
}</p>

<p>{% endcodeblock %}</p>

<h2>手順3 htmlファイルを作成する</h2>

<p>ただこれだけ</p>

<p>{% codeblock %}</p>

<p>&lt;!DOCTYPE html>
<html>
<head lang="en">
  <meta charset="UTF-8">
    <title></title>
</head>
<body>
    <h1>Hello World</h1>
</body>
 </html></p>

<p>{% endcodeblock %}</p>

<p>これで実行すればHello Worldが出力されます。</p>

<h2>おまけ</h2>

<p>Hello Worldを出力する上で、routingを全く気にしていないですが、実際にアプリケーションを作る上でroutingは必須です。簡単にroutingをする方法を見てみます。</p>

<p>{% codeblock %}</p>

<h1>Routes</h1>

<h1>This file defines all application routes (Higher priority routes first)</h1>

<h1>~~~~</h1>

<h1>Home page</h1>

<p>GET     /                           controllers.Application.index</p>

<h1>Map static resources from the /public folder to the /assets URL path</h1>

<p>GET     /assets/*file               controllers.Assets.at(path=&ldquo;/public&rdquo;, file)</p>

<p>{% endcodeblock %}</p>

<p>この中で変更する部分は
<strong>GET     /                           controllers.Application.index</strong>
です。これは<strong>/</strong>にgetを投げたときに<strong>/app/controllers/Application.scalaのindex</strong>を表示するという意味です(多分)。なので、この辺を自分のやりたいようにできます(ある程度までは)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ScalaでWikiをつくりたい]]></title>
    <link href="http://asahima.github.io/blog/2015/01/15/scaladewikiwotukututemitai/"/>
    <updated>2015-01-15T03:07:05+09:00</updated>
    <id>http://asahima.github.io/blog/2015/01/15/scaladewikiwotukututemitai</id>
    <content type="html"><![CDATA[<p>研究やプログラミングをする際に、何か気になったことやこれは覚えておきたいなと思ったことはいつもローカルで動かしているWikiに書き込んでいるのですが、最近自分で使っているWikiに不満を覚えたので、勉強がてらに挑戦してみることにしみました。</p>

<h2>欲しい機能</h2>

<p>自分で使う上で欲しい機能は以下のようなものです。</p>

<ul>
<li>記事の投稿</li>
<li>&lsquo;&rsquo; 削除</li>
<li>&lsquo;&rsquo; 編集</li>
<li>&lsquo;&rsquo; 検索</li>
<li>&lsquo;&rsquo; タグ付与</li>
<li>markdownでの記入</li>
<li>markdownのpreview</li>
</ul>


<h2>何で作るか</h2>

<ul>
<li>言語

<ul>
<li>Scala</li>
</ul>
</li>
<li>使いたいライブラリ

<ul>
<li>Play2.x or Skinny

<ul>
<li>Webフレームワーク</li>
<li>フルスタックらしい</li>
</ul>
</li>
<li>Slick

<ul>
<li>ORM</li>
</ul>
</li>
<li>knockoff

<ul>
<li>markdownをHTMLに変換するライブラリらしい</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>まぁ、こんな構成でぼちぼちやっていこうと思います。その過程を書いていければと思います。</p>

<p>では</p>
]]></content>
  </entry>
  
</feed>
